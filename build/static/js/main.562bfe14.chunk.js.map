{"version":3,"sources":["components/TodoForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoForm","props","react","onSubmit","htmlFor","onChange","id","name","value","newTodo","title","type","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","done","todos","bind","assertThisInitialized","e","preventDefault","setState","toConsumableArray","concat","target","index","checked","splice","map","todo","_this2","react_default","a","createElement","className","components_TodoForm","onClick","allDone","item","key","Math","floor","random","event","onClickDone","style","textDecoration","removeTodo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAuBeA,SAVqB,SAACC,GACpC,OACCC,EAAA,sBAAMC,SAAUF,EAAME,UACrBD,EAAA,uBAAOE,QAAQ,YACfF,EAAA,uBAAOG,SAAUJ,EAAMI,SAAUC,GAAG,UAAUC,KAAK,UAAUC,MAAOP,EAAMQ,QAAQC,QAClFR,EAAA,wBAAQS,KAAK,UAAb,eC+EYC,cApFd,SAAAA,EAAYX,GAAY,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACvBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,KACDmB,MAAQ,CACZX,QAAS,CACRC,MAAO,GACPW,MAAM,GAEPC,MAAO,IAERT,EAAKV,SAAWU,EAAKV,SAASoB,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAChBA,EAAKR,SAAWQ,EAAKR,SAASkB,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAVOA,wEAafY,GACRA,EAAEC,iBAC+B,KAA7BV,KAAKI,MAAMX,QAAQC,OAGvBM,KAAKW,SAAS,CACbL,MAAMR,OAAAc,EAAA,EAAAd,CAAKE,KAAKI,MAAME,OAAjBO,OAAA,CAAwBb,KAAKI,MAAMX,UACxCA,QAAS,CACRC,MAAO,GACPW,MAAM,sCAKAI,GACRT,KAAKW,SAAS,CACblB,QAAS,CACRC,MAAOe,EAAEK,OAAOtB,MAChBa,MAAM,yCAKGI,EAAQM,GACnB,IAAMT,EAAiBR,OAAAc,EAAA,EAAAd,CAAOE,KAAKI,MAAME,OACzCA,EAAMS,GAAOV,KAAOI,EAAEK,OAAOE,QAC7BhB,KAAKW,SAAS,CACbL,MAAOA,uCAIES,GACV,IAAMT,EAAKR,OAAAc,EAAA,EAAAd,CAAOE,KAAKI,MAAME,OAC7BA,EAAMW,OAAOF,EAAO,GACpBf,KAAKW,SAAS,CACbL,MAAOA,sCAKR,IAAMA,EAAQN,KAAKI,MAAME,MAAMY,IAAI,SAAAC,GAClC,MAAO,CACNzB,MAAOyB,EAAKzB,MACZW,MAAM,KAGRL,KAAKW,SAAS,CACbL,MAAOA,qCAIC,IAAAc,EAAApB,KACP,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAClBH,EAAAC,EAAAC,cAACE,EAAD,CAAUpC,SAAUW,KAAKX,SAAUF,SAAUa,KAAKb,SAAUM,QAASO,KAAKI,MAAMX,UAC/E4B,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMN,EAAKO,YAA5B,YACAN,EAAAC,EAAAC,cAAA,UACEvB,KAAKI,MAAME,MAAMY,IAAI,SAACU,EAAMb,GAC3B,OAAOM,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKlC,MAAQoC,KAAKC,MAAsB,IAAhBD,KAAKE,WAC5CX,EAAAC,EAAAC,cAAA,SAAOlC,SAAU,SAAC4C,GAAD,OAAWb,EAAKc,YAAYD,EAAOlB,IAAQpB,KAAK,WAAWqB,QAASY,EAAKvB,OAC1FgB,EAAAC,EAAAC,cAAA,QAAMY,MAAO,CAAEC,eAAgBR,EAAKvB,KAAO,eAAiB,YAAauB,EAAKlC,OAC9E2B,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMN,EAAKiB,WAAWtB,KAAvC,sBA3EUuB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.562bfe14.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype TodoItem = {\n\ttitle: string;\n\tdone: boolean;\n}\n\nexport interface IProps {\n\tonSubmit: (e: any) => any,\n\tonChange: (e: any) => any,\n\tnewTodo: TodoItem\n}\n\nconst TodoForm: React.SFC<IProps> = (props: IProps) => {\n\treturn (\n\t\t<form onSubmit={props.onSubmit}>\n\t\t\t<label htmlFor=\"newTodo\"></label>\n\t\t\t<input onChange={props.onChange} id=\"newTodo\" name=\"newTodo\" value={props.newTodo.title}/>\n\t\t\t<button type=\"submit\">Add Todo</button>\n\t\t</form>\n\t)\n}\n\nexport default TodoForm;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Header';\nimport Description from './Description';\nimport TodoForm from './components/TodoForm';\n\ntype TodoItem = {\n\ttitle: string;\n\tdone: boolean;\n}\n\nclass App extends Component<{}, { newTodo: TodoItem, todos: TodoItem[] }> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tnewTodo: {\n\t\t\t\ttitle: '',\n\t\t\t\tdone: false\t\n\t\t\t},\n\t\t\ttodos: []\n\t\t}\n\t\tthis.onSubmit = this.onSubmit.bind(this);\n\t\tthis.onChange = this.onChange.bind(this);\n\t}\n\n\tonSubmit(e: any) {\n\t\te.preventDefault();\n\t\tif (this.state.newTodo.title === '') {\n\t\t\treturn\n\t\t}\n\t\tthis.setState({\n\t\t\ttodos: [...this.state.todos, this.state.newTodo],\n\t\t\tnewTodo: {\n\t\t\t\ttitle: '',\n\t\t\t\tdone: false\n\t\t\t}\n\t\t})\n\t}\n\n\tonChange(e: any) {\n\t\tthis.setState({\n\t\t\tnewTodo: {\n\t\t\t\ttitle: e.target.value,\n\t\t\t\tdone: false\n\t\t\t}\n\t\t})\n\t}\n\n\tonClickDone(e: any, index: number) {\n\t\tconst todos: TodoItem[] = [...this.state.todos];\n\t\ttodos[index].done = e.target.checked;\n\t\tthis.setState({\n\t\t\ttodos: todos\n\t\t})\n\t}\n\n\tremoveTodo(index: number) {\n\t\tconst todos = [...this.state.todos];\n\t\ttodos.splice(index, 1);\n\t\tthis.setState({\n\t\t\ttodos: todos\n\t\t});\n\t}\n\n\tallDone() {\n\t\tconst todos = this.state.todos.map(todo => {\n\t\t\treturn {\n\t\t\t\ttitle: todo.title,\n\t\t\t\tdone: true\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\ttodos: todos\n\t\t});\n\t}\n\n  render() {\n    return (\n      <div className=\"App\">\n\t\t\t<TodoForm onChange={this.onChange} onSubmit={this.onSubmit} newTodo={this.state.newTodo}/>\n\t\t\t\t<button onClick={() => this.allDone()}>All Done</button>\n\t\t\t\t<ul>\n\t\t\t\t\t{this.state.todos.map((item, index) => {\n\t\t\t\t\t\t\treturn <li key={item.title + Math.floor(Math.random() * 10000)}>\n\t\t\t\t\t\t\t\t<input onChange={(event) => this.onClickDone(event, index)} type=\"checkbox\" checked={item.done}/>\n\t\t\t\t\t\t\t\t<span style={{ textDecoration: item.done ? 'line-through' : 'inherit'}}>{item.title}</span>\n\t\t\t\t\t\t\t\t<button onClick={() => this.removeTodo(index)}>Remove</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}